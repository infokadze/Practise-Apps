{\rtf1\ansi\ansicpg1251\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier-Bold;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs24 \cf0 \
1) drawRectangle
\f1\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\
func drawRectangle() \{\
    let renderer = UIGraphicsImageRenderer(size: CGSize(width: 300, height: 300))\
    \
    let img = renderer.image \{ ctx in\
        let rectangle = CGRect(x: 0, y: 0, width: 300, height: 300)\
        \
        ctx.cgContext.setFillColor(UIColor.red.cgColor)\
        ctx.cgContext.setStrokeColor(UIColor.green.cgColor)\
        ctx.cgContext.setLineWidth(10)\
\
        ctx.cgContext.addRect(rectangle)\
        ctx.cgContext.drawPath(using: .fillStroke)\
    \}\
    \
    imageView.image = img\
\}\
\
\

\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 2) drawRectangle (no border)
\f1\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\
func drawRectangle2() \{\
    let renderer = UIGraphicsImageRenderer(size: CGSize(width: 300, height: 300))\
    \
    let img = renderer.image \{ ctx in\
        ctx.cgContext.setFillColor(UIColor.red.cgColor)\
        ctx.cgContext.fill(CGRect(x: 0, y: 0, width: 300, height: 300))\
    \}\
    \
    imageView.image = img\
\}\
\
\

\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 3) drawCircle
\f1\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\
func drawCircle() \{\
    let renderer = UIGraphicsImageRenderer(size: CGSize(width: 300, height: 300))\
    \
    let img = renderer.image \{ ctx in\
        ctx.cgContext.setFillColor(UIColor.red.cgColor)\
        ctx.cgContext.setStrokeColor(UIColor.green.cgColor)\
        ctx.cgContext.setLineWidth(10)\
\
        let rectangle = CGRect(x: 0, y: 0, width: 300, height: 300).inset(by: UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10))\
        ctx.cgContext.addEllipse(in: rectangle)\
        ctx.cgContext.drawPath(using: .fillStroke)\
    \}\
    \
    imageView.image = img\
\}\
\
\

\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 4) drawRotatedSquare
\f1\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\
\pard\pardeftab720\partightenfactor0
\cf2 func drawRotatedSquare() \{\
    let renderer = UIGraphicsImageRenderer(size: CGSize(width: 256, height: 256))\
    \
    let img = renderer.image \{ ctx in\
        \
        ctx.cgContext.translateBy(x: 128, y: 128)\
        let rotations = 16\
        let amount = Double.pi / Double(rotations)\
        \
        // add 16 rotated rectangles\
        for _ in 0 ..< rotations \{\
            ctx.cgContext.rotate(by: CGFloat(amount))\
            ctx.cgContext.addRect(CGRect(x: -64, y: -64, width: 128, height: 128))\
        \}\
        \
        ctx.cgContext.setStrokeColor(UIColor.systemRed.cgColor)\
        ctx.cgContext.strokePath()\
    \}\
    \
    imageView.image = img\
\}\
\pard\pardeftab720\partightenfactor0
\cf2 \
\

\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 5) drawLines\

\f1\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 func drawLines() \{\
    let renderer = UIGraphicsImageRenderer(size: CGSize(width: 256, height: 256))\
    \
    let img = renderer.image \{ ctx in\
        ctx.cgContext.translateBy(x: 128, y: 128)\
        \
        var first = true\
        var length: CGFloat = 128\
        \
        for _ in 0 ..< 128 \{\
            ctx.cgContext.rotate(by: .pi / 2)\
            if first \{\
                ctx.cgContext.move(to: CGPoint(x: length, y: 25))\
                first = false\
            \} else \{\
                ctx.cgContext.addLine(to: CGPoint(x: length, y: 25))\
            \}\
            \
            length *= 0.99\
        \}\
        \
        ctx.cgContext.setStrokeColor(UIColor.systemRed.cgColor)\
        ctx.cgContext.strokePath()\
    \}\
    \
    imageView.image = img\
\}\
\pard\pardeftab720\partightenfactor0
\cf2 \
\

\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 6) drawImagesAndText
\f1\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\
\pard\pardeftab720\partightenfactor0
\cf2 func drawImagesAndText() \{\
    let renderer = UIGraphicsImageRenderer(size: CGSize(width: 256, height: 256))\
    \
    let img = renderer.image \{ ctx in\
        let paragraphStyle = NSMutableParagraphStyle()\
        paragraphStyle.alignment = .center\
        \
        let attrs: [NSAttributedString.Key: Any] = [\
            .font: UIFont.preferredFont(forTextStyle: .title1),\
            .paragraphStyle: paragraphStyle\
        ]\
        \
        let string = "The best laid schemes of mince and men"\
        \
        let attributedString = NSAttributedString(string: string, attributes: attrs)\
        attributedString.draw(with: CGRect(x: 32, y: 32, width: 200, height: 200), options: .usesLineFragmentOrigin, context: nil)\
        \
        let star = UIImage(named: "star")\
        star?.draw(at: CGPoint(x: 124, y: 150))\
    \}\
    \
    imageView.image = img\
\}\
\
\
\
7) Autolayout\
\
import UIKit\
\
class GraphView: UIView \{\
    \
    let imageView = UIImageView()\
    \
    override init(frame: CGRect) \{\
        super.init(frame: .zero)\
        backgroundColor = .systemYellow\
        layout()\
    \}\
    \
    required init?(coder: NSCoder) \{\
        fatalError("init(coder:) has not been implemented")\
    \}\
\
    func layout() \{\
        imageView.translatesAutoresizingMaskIntoConstraints = false\
        \
        drawRectangle()\
        \
        addSubview(imageView)\
        \
        NSLayoutConstraint.activate([\
            imageView.centerXAnchor.constraint(equalTo: centerXAnchor),\
            imageView.centerYAnchor.constraint(equalTo: centerYAnchor),\
        ])\
    \}\
\
    func drawRectangle() \{ ... \}\
\}\
\
\pard\pardeftab720\partightenfactor0
\cf2 \
}